package apiv3

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// MailSendResponse is the wrapper around API v3 response; includes message ID returned for a successful request
type MailSendResponse struct {
	MessageID string

	*Response
}

// MailSend sends a single message using v3 API /mail/send
//
// If the request was successful, the message IDs generated by SendGrid are saved in
// the response object
//
// If v3 Response object also returns the raw body, status code and any errors from the
// HTTP response
func (c *Client) MailSend(mailV3 *MailV3) (*MailSendResponse, error) {
	var err error

	// marshal the message into HTTP request body
	body, err := json.Marshal(mailV3)
	if err != nil {
		return nil, fmt.Errorf("error marshaling message: %s", err)
	}

	resp := &MailSendResponse{}

	// make the mail/send API request
	resp.Response, err = c.Post("/mail/send", body)
	if err != nil {
		return nil, err
	}

	// if errors are returned by the API
	if len(resp.Errors) > 0 {
		return resp, errors.New("error sending mail, check resp.Errors")
	}

	// mail send was successful
	resp.MessageID = resp.Header["X-Message-Id"][0]
	return resp, nil
}

// NewSingleEmail returns a MailV3 object for sending a mail to a single recipient
//
// All parameters are required to be non-empty
func NewSingleEmail(from, to *Email, subject, plainTextContent, htmlContent string) (*MailV3, error) {
	if from == nil || to == nil || subject == "" || plainTextContent == "" || htmlContent == "" {
		return nil, errors.New("All parameters are required to be non-empty")
	}

	mailV3 := &MailV3{
		From:    from,
		Subject: subject,
	}

	// set text and HTML contents
	mailV3.SetTextContent(plainTextContent).
		SetHTMLContent(htmlContent)

	// add a personalization corresponding to 'to' address
	mailV3.AddPersonalizations(
		&Personalization{
			To: []*Email{to},
		},
	)

	return mailV3, nil
}
